##alpha = .05
##       number of populations
##       2	 3	 4	 5	 6	 7	 8	 9	 10	11	12	13	14	15	16	17	18	19	20
##  df
##  1	 18.0	 27.0	 32.8	 37.1 	 40.4	 43.1	 45.4	 47.4	 49.1	50.6	52.0	53.2	54.3	55.4	56.3	57.2	58.0	58.8	59.6 \
##  2	 6.08	 8.33	 9.80	 10.9	 11.7	 12.4	 13.0	 13.5	 14.0	14.4	14.7	15.1	15.4	15.7	15.9	16.1	16.4	16.6	16.8 \
##  3	 4.50	 5.91	 6.82	 7.50	 8.04	 8.48	 8.85	 9.18	 9.46	 9.72	 9.95	10.2	10.3	10.5	10.7	10.8	11.0	11.1	11.2 \
##  4	 3.93	 5.04	 5.76	 6.29	 6.71	 7.05	 7.35	 7.60	 7.83	 8.03	 8.21	 8.37	 8.52	 8.66	 8.79	 8.91	 9.03	 9.13	 9.23 \
##  5	 3.64	 4.60	 5.22	 5.67	 6.03	 6.33	 6.58	 6.80	 6.99	 7.17	 7.32	 7.47	 7.60	 7.72	 7.83	 7.93	 8.03	 8.12	 8.21 \
##  6	 3.46	 4.34	 4.90	 5.30	 5.63	 5.90	 6.12	 6.32	 6.49	 6.65	 6.79	 6.92	 7.03	 7.14	 7.24	 7.34	 7.43	 7.51	 7.59 \
##  7	 3.34	 4.16	 4.68	 5.06	 5.36	 5.61	 5.82	 6.00	 6.16	 6.30	 6.43	 6.55	 6.66	 6.76	 6.85	 6.94	 7.02	 7.10	 7.17 \
##  8	 3.26	 4.04	 4.53	 4.89	 5.17	 5.40	 5.60	 5.77	 5.92	 6.05	 6.18	 6.29	 6.39	 6.48	 6.57	 6.65	 6.73	 6.80	 6.87 \
##  9	 3.20	 3.95	 4.41	 4.76	 5.02	 5.24	 5.43	 5.59	 5.74	 5.87	 5.98	 6.09	 6.19	 6.28	 6.36	 6.44	 6.51	 6.58	 6.64 \
## 10	 3.15	 3.88	 4.33	 4.65	 4.91	 5.12	 5.30	 5.46	 5.60	 5.72	 5.83	 5.93	 6.03	 6.11	 6.19	 6.27	 6.34	 6.40	 6.47 \
## 11	 3.11	 3.82	 4.26	 4.57	 4.82	 5.03	 5.20	 5.35	 5.49	 5.61	 5.71	 5.81	 5.90	 5.98	 6.06	 6.13	 6.20	 6.27	 6.33 \
## 12	 3.08	 3.77	 4.20	 4.51	 4.75	 4.95	 5.12	 5.27	 5.39	 5.51	 5.61	 5.71	 5.80	 5.88	 5.95	 6.02	 6.09	 6.15	 6.21 \
## 13	 3.06	 3.73	 4.15	 4.45	 4.69	 4.88	 5.05	 5.19	 5.32	 5.43	 5.53	 5.63	 5.71	 5.79	 5.86	 5.93	 5.99	 6.05	 6.11 \
## 14	 3.03	 3.70	 4.11	 4.41	 4.64	 4.83	 4.99	 5.13	 5.25	 5.36	 5.46	 5.55	 5.64	 5.71	 5.79	 5.85	 5.91	 5.97	 6.03 \
## 15	 3.01	 3.67	 4.08	 4.37	 4.59	 4.78	 4.94	 5.08	 5.20	 5.31	 5.40	 5.49	 5.57	 5.65	 5.72	 5.78	 5.85	 5.90	 5.96 \
## 16	 3.00	 3.65	 4.05	 4.33	 4.56	 4.74	 4.90	 5.03	 5.15	 5.26	 5.35	 5.44	 5.52	 5.59	 5.66	 5.73	 5.79	 5.84	 5.90 \
## 17	 2.98	 3.63	 4.02	 4.30	 4.52	 4.70	 4.86	 4.99	 5.11	 5.21	 5.31	 5.39	 5.47	 5.54	 5.61	 5.67	 5.73	 5.79	 5.84 \
## 18	 2.97	 3.61	 4.00	 4.28	 4.49	 4.67	 4.82	 4.96	 5.07	 5.17	 5.27	 5.35	 5.43	 5.50	 5.57	 5.63	 5.69	 5.74	 5.79 \
## 19	 2.96	 3.59	 3.98	 4.25	 4.47	 4.65	 4.79	 4.92	 5.04	 5.14	 5.23	 5.31	 5.39	 5.46	 5.53	 5.59	 5.65	 5.70	 5.75 \
## 20	 2.95	 3.58	 3.96	 4.23	 4.45	 4.62	 4.77	 4.90	 5.01	 5.11	 5.20	 5.28	 5.36	 5.43	 5.49	 5.55	 5.61	 5.66	 5.71 \
## 24	 2.92	 3.53	 3.90	 4.17	 4.37	 4.54	 4.68	 4.81	 4.92	 5.01	 5.10	 5.18	 5.25	 5.32	 5.38	 5.44	 5.49	 5.55	 5.59 \
## 30	 2.89	 3.49	 3.85	 4.10	 4.30	 4.46	 4.60	 4.72	 4.82	 4.92	 5.00	 5.08	 5.15	 5.21	 5.27	 5.33	 5.38	 5.43	 5.47 \
## 40	 2.86	 3.44	 3.79	 4.04	 4.23	 4.39	 4.52	 4.63	 4.73	 4.82	 4.90	 4.98	 5.04	 5.11	 5.16	 5.22	 5.27	 5.31	 5.36 \
## 60	 2.83	 3.40	 3.74	 3.98	 4.16	 4.31	 4.44	 4.55	 4.65	 4.73	 4.81	 4.88	 4.94	 5.00	 5.06	 5.11	 5.15	 5.20	 5.24 \
##120	 2.80	 3.36	 3.68	 3.92	 4.10	 4.24	 4.36	 4.47	 4.56	 4.64	 4.71	 4.78	 4.84	 4.90	 4.95	 5.00	 5.04	 5.09	 5.13 \
##200	 2.77	 3.31	 3.63	 3.86	 4.03	 4.17	 4.29	 4.39	 4.47	 4.55	 4.62	 4.68	 4.74	 4.80	 4.85	 4.89	 4.93	 4.97	 5.01 \
##
##
##alpha = .01
##       number of populations
##       2	 3	 4	 5	 6	 7	 8	 9	 10	11	12	13	14	15	16	17	18	19	20
##  df
##  1    90.0	 135.0	 164.0	 186.0	 202.0	 216.0	 227.0	 237.0	 246.0	253.0	260.0	266.0	272.0	277.0	282.0	286.0	290.0	294.0	298.0 \
##  2	 14.0	 19.0	 22.3	 24.7	 26.6	 28.2	 29.5	 30.7	 31.7	32.6	33.4	34.1	34.8	35.4	36.0	36.5	37.0	37.5	37.9 \
##  3	 8.26	 10.6	 12.2	 13.3	 14.2	 15.0	 15.6	 16.2	 16.7	17.1	17.5	17.9	18.2	18.5	18.8	19.1	19.3	19.5	19.8 \
##  4	 6.51	 8.12	 9.17	 9.96	 10.6	 11.1	 11.5	 11.9	 12.3	12.6	12.8	13.1	13.3	13.5	13.7	13.9	14.1	14.2	14.4 \
##  5	 5.70	 6.97	 7.80	 8.42	 8.91	 9.32	 9.67	 9.97	 10.2	10.5	10.7	10.9	11.1	11.2	11.4	11.6	11.7	11.8	11.9 \
##  6	 5.24	 6.33	 7.03	 7.56	 7.97	 8.32	 8.61	 8.87	 9.10	 9.30	 9.49	 9.65	 9.81	 9.95	10.1	10.2	10.3	10.4	10.5 \
##  7	 4.95	 5.92	 6.54	 7.01	 7.37	 7.68	 7.94	 8.17	 8.37	 8.55	 8.71	 8.86	 9.00	 9.12	 9.24	 9.35	 9.46	 9.55	 9.65 \
##  8	 4.74	 5.63	 6.20	 6.63	 6.96	 7.24	 7.47	 7.68	 7.87	 8.03	 8.18	 8.31	 8.44	 8.55	 8.66	 8.76	 8.85	 8.94	 9.03 \
##  9	 4.60	 5.43	 5.96	 6.35	 6.66	 6.91	 7.13	 7.32	 7.49	 7.65	 7.78	 7.91	 8.03	 8.13	 8.23	 8.32	 8.41	 8.49	 8.57 \
## 10	 4.48	 5.27	 5.77	 6.14	 6.43	 6.67	 6.87	 7.05	 7.21	 7.36	 7.48	 7.60	 7.71	 7.81	 7.91	 7.99	 8.07	 8.15	 8.22 \
## 11	 4.39	 5.14	 5.62	 5.97	 6.25	 6.48	 6.67	 6.84	 6.99	 7.13	 7.25	 7.36	 7.46	 7.56	 7.65	 7.73	 7.81	 7.88	 7.95 \
## 12	 4.32	 5.04	 5.50	 5.84	 6.10	 6.32	 6.51	 6.67	 6.81	 6.94	 7.06	 7.17	 7.26	 7.36	 7.44	 7.52	 7.59	 7.66	 7.73 \
## 13	 4.26	 4.96	 5.40	 5.73	 5.98	 6.19	 6.37	 6.53	 6.67	 6.79	 6.90	 7.01	 7.10	 7.19	 7.27	 7.34	 7.42	 7.48	 7.55 \
## 14	 4.21	 4.89	 5.32	 5.63	 5.88	 6.08	 6.26	 6.41	 6.54	 6.66	 6.77	 6.87	 6.96	 7.05	 7.12	 7.20	 7.27	 7.33	 7.39 \
## 15	 4.17	 4.83	 5.25	 5.56	 5.80	 5.99	 6.16	 6.31	 6.44	 6.55	 6.66	 6.76	 6.84	 6.93	 7.00	 7.07	 7.14	 7.20	 7.26 \
## 16	 4.13	 4.78	 5.19	 5.49	 5.72	 5.92	 6.08	 6.22	 6.35	 6.46	 6.56	 6.66	 6.74	 6.82	 6.90	 6.97	 7.03	 7.09	 7.15 \
## 17	 4.10	 4.74	 5.14	 5.43	 5.66	 5.85	 6.01	 6.15	 6.27	 6.38	 6.48	 6.57	 6.66	 6.73	 6.80	 6.87	 6.94	 7.00	 7.05 \
## 18	 4.07	 4.70	 5.09	 5.38	 5.60	 5.79	 5.94	 6.08	 6.20	 6.31	 6.41	 6.50	 6.58	 6.65	 6.72	 6.79	 6.85	 6.91	 6.96 \
## 19	 4.05	 4.67	 5.05	 5.33	 5.55	 5.73	 5.89	 6.02	 6.14	 6.25	 6.34	 6.43	 6.51	 6.58	 6.65	 6.72	 6.78	 6.84	 6.89 \
## 20	 4.02	 4.64	 5.02	 5.29	 5.51	 5.69	 5.84	 5.97	 6.09	 6.19	 6.29	 6.37	 6.45	 6.52	 6.59	 6.65	 6.71	 6.76	 6.82 \
## 24	 3.96	 4.54	 4.91	 5.17	 5.37	 5.54	 5.69	 5.81	 5.92	 6.02	 6.11	 6.19	 6.26	 6.33	 6.39	 6.45	 6.51	 6.56	 6.61 \
## 30	 3.89	 4.45	 4.80	 5.05	 5.24	 5.40	 5.54	 5.65	 5.76	 5.85	 5.93	 6.01	 6.08	 6.14	 6.20	 6.26	 6.31	 6.36	 6.41 \
## 40	 3.82	 4.37	 4.70	 4.93	 5.11	 5.27	 5.39	 5.50	 5.60	 5.69	 5.77	 5.84	 5.90	 5.96	 6.02	 6.07	 6.12	 6.17	 6.21 \
## 60	 3.76	 4.28	 4.60	 4.82	 4.99	 5.13	 5.25	 5.36	 5.45	 5.53	 5.60	 5.67	 5.73	 5.79	 5.84	 5.89	 5.93	 5.98	 6.02 \
##120	 3.70	 4.20	 4.50	 4.71	 4.87	 5.01	 5.12	 5.21	 5.30	 5.38	 5.44	 5.51	 5.56	 5.61	 5.66	 5.71	 5.75	 5.79	 5.83 \
##200	 3.64	 4.12	 4.40	 4.60	 4.76	 4.88	 4.99	 5.08	 5.16	 5.23	 5.29	 5.35	 5.40	 5.45	 5.49	 5.54	 5.57	 5.61	 5.65 \



a05 = [[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 24.0, 30.0, 40.0, 60.0, 120.0, 200.0],
[18.0, 6.08, 4.5, 3.93, 3.64, 3.46, 3.34, 3.26, 3.2, 3.15, 3.11, 3.08, 3.06, 3.03, 3.01, 3.0, 2.98, 2.97, 2.96, 2.95, 2.92, 2.89, 2.86, 2.83, 2.8, 2.77],
[27.0, 8.33, 5.91, 5.04, 4.6, 4.34, 4.16, 4.04, 3.95, 3.88, 3.82, 3.77, 3.73, 3.7, 3.67, 3.65, 3.63, 3.61, 3.59, 3.58, 3.53, 3.49, 3.44, 3.4, 3.36, 3.31],
[32.8, 9.8, 6.82, 5.76, 5.22, 4.9, 4.68, 4.53, 4.41, 4.33, 4.26, 4.2, 4.15, 4.11, 4.08, 4.05, 4.02, 4.0, 3.98, 3.96, 3.9, 3.85, 3.79, 3.74, 3.68, 3.63],
[37.1, 10.9, 7.5, 6.29, 5.67, 5.3, 5.06, 4.89, 4.76, 4.65, 4.57, 4.51, 4.45, 4.41, 4.37, 4.33, 4.3, 4.28, 4.25, 4.23, 4.17, 4.1, 4.04, 3.98, 3.92, 3.86],
[40.4, 11.7, 8.04, 6.71, 6.03, 5.63, 5.36, 5.17, 5.02, 4.91, 4.82, 4.75, 4.69, 4.64, 4.59, 4.56, 4.52, 4.49, 4.47, 4.45, 4.37, 4.3, 4.23, 4.16, 4.1, 4.03],
[43.1, 12.4, 8.48, 7.05, 6.33, 5.9, 5.61, 5.4, 5.24, 5.12, 5.03, 4.95, 4.88, 4.83, 4.78, 4.74, 4.7, 4.67, 4.65, 4.62, 4.54, 4.46, 4.39, 4.31, 4.24, 4.17],
[45.4, 13.0, 8.85, 7.35, 6.58, 6.12, 5.82, 5.6, 5.43, 5.3, 5.2, 5.12, 5.05, 4.99, 4.94, 4.9, 4.86, 4.82, 4.79, 4.77, 4.68, 4.6, 4.52, 4.44, 4.36, 4.29],
[47.4, 13.5, 9.18, 7.6, 6.8, 6.32, 6.0, 5.77, 5.59, 5.46, 5.35, 5.27, 5.19, 5.13, 5.08, 5.03, 4.99, 4.96, 4.92, 4.9, 4.81, 4.72, 4.63, 4.55, 4.47, 4.39],
[49.1, 14.0, 9.46, 7.83, 6.99, 6.49, 6.16, 5.92, 5.74, 5.6, 5.49, 5.39, 5.32, 5.25, 5.2, 5.15, 5.11, 5.07, 5.04, 5.01, 4.92, 4.82, 4.73, 4.65, 4.56, 4.47],
[50.6, 14.4, 9.72, 8.03, 7.17, 6.65, 6.3, 6.05, 5.87, 5.72, 5.61, 5.51, 5.43, 5.36, 5.31, 5.26, 5.21, 5.17, 5.14, 5.11, 5.01, 4.92, 4.82, 4.73, 4.64, 4.55],
[52.0, 14.7, 9.95, 8.21, 7.32, 6.79, 6.43, 6.18, 5.98, 5.83, 5.71, 5.61, 5.53, 5.46, 5.4, 5.35, 5.31, 5.27, 5.23, 5.2, 5.1, 5.0, 4.9, 4.81, 4.71, 4.62],
[53.2, 15.1, 10.2, 8.37, 7.47, 6.92, 6.55, 6.29, 6.09, 5.93, 5.81, 5.71, 5.63, 5.55, 5.49, 5.44, 5.39, 5.35, 5.31, 5.28, 5.18, 5.08, 4.98, 4.88, 4.78, 4.68],
[54.3, 15.4, 10.3, 8.52, 7.6, 7.03, 6.66, 6.39, 6.19, 6.03, 5.9, 5.8, 5.71, 5.64, 5.57, 5.52, 5.47, 5.43, 5.39, 5.36, 5.25, 5.15, 5.04, 4.94, 4.84, 4.74],
[55.4, 15.7, 10.5, 8.66, 7.72, 7.14, 6.76, 6.48, 6.28, 6.11, 5.98, 5.88, 5.79, 5.71, 5.65, 5.59, 5.54, 5.5, 5.46, 5.43, 5.32, 5.21, 5.11, 5.0, 4.9, 4.8],
[56.3, 15.9, 10.7, 8.79, 7.83, 7.24, 6.85, 6.57, 6.36, 6.19, 6.06, 5.95, 5.86, 5.79, 5.72, 5.66, 5.61, 5.57, 5.53, 5.49, 5.38, 5.27, 5.16, 5.06, 4.95, 4.85],
[57.2, 16.1, 10.8, 8.91, 7.93, 7.34, 6.94, 6.65, 6.44, 6.27, 6.13, 6.02, 5.93, 5.85, 5.78, 5.73, 5.67, 5.63, 5.59, 5.55, 5.44, 5.33, 5.22, 5.11, 5.0, 4.89],
[58.0, 16.4, 11.0, 9.03, 8.03, 7.43, 7.02, 6.73, 6.51, 6.34, 6.2, 6.09, 5.99, 5.91, 5.85, 5.79, 5.73, 5.69, 5.65, 5.61, 5.49, 5.38, 5.27, 5.15, 5.04, 4.93],
[58.8, 16.6, 11.1, 9.13, 8.12, 7.51, 7.1, 6.8, 6.58, 6.4, 6.27, 6.15, 6.05, 5.97, 5.9, 5.84, 5.79, 5.74, 5.7, 5.66, 5.55, 5.43, 5.31, 5.2, 5.09, 4.97],
[59.6, 16.8, 11.2, 9.23, 8.21, 7.59, 7.17, 6.87, 6.64, 6.47, 6.33, 6.21, 6.11, 6.03, 5.96, 5.9, 5.84, 5.79, 5.75, 5.71, 5.59, 5.47, 5.36, 5.24, 5.13, 5.01]]

a01 = [[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 24.0, 30.0, 40.0, 60.0, 120.0, 200.0],
[90.0, 14.0, 8.26, 6.51, 5.7, 5.24, 4.95, 4.74, 4.6, 4.48, 4.39, 4.32, 4.26, 4.21, 4.17, 4.13, 4.1, 4.07, 4.05, 4.02, 3.96, 3.89, 3.82, 3.76, 3.7, 3.64],
[135.0, 19.0, 10.6, 8.12, 6.97, 6.33, 5.92, 5.63, 5.43, 5.27, 5.14, 5.04, 4.96, 4.89, 4.83, 4.78, 4.74, 4.7, 4.67, 4.64, 4.54, 4.45, 4.37, 4.28, 4.2, 4.12],
[164.0, 22.3, 12.2, 9.17, 7.8, 7.03, 6.54, 6.2, 5.96, 5.77, 5.62, 5.5, 5.4, 5.32, 5.25, 5.19, 5.14, 5.09, 5.05, 5.02, 4.91, 4.8, 4.7, 4.6, 4.5, 4.4],
[186.0, 24.7, 13.3, 9.96, 8.42, 7.56, 7.01, 6.63, 6.35, 6.14, 5.97, 5.84, 5.73, 5.63, 5.56, 5.49, 5.43, 5.38, 5.33, 5.29, 5.17, 5.05, 4.93, 4.82, 4.71, 4.6],
[202.0, 26.6, 14.2, 10.6, 8.91, 7.97, 7.37, 6.96, 6.66, 6.43, 6.25, 6.1, 5.98, 5.88, 5.8, 5.72, 5.66, 5.6, 5.55, 5.51, 5.37, 5.24, 5.11, 4.99, 4.87, 4.76],
[216.0, 28.2, 15.0, 11.1, 9.32, 8.32, 7.68, 7.24, 6.91, 6.67, 6.48, 6.32, 6.19, 6.08, 5.99, 5.92, 5.85, 5.79, 5.73, 5.69, 5.54, 5.4, 5.27, 5.13, 5.01, 4.88],
[227.0, 29.5, 15.6, 11.5, 9.67, 8.61, 7.94, 7.47, 7.13, 6.87, 6.67, 6.51, 6.37, 6.26, 6.16, 6.08, 6.01, 5.94, 5.89, 5.84, 5.69, 5.54, 5.39, 5.25, 5.12, 4.99],
[237.0, 30.7, 16.2, 11.9, 9.97, 8.87, 8.17, 7.68, 7.32, 7.05, 6.84, 6.67, 6.53, 6.41, 6.31, 6.22, 6.15, 6.08, 6.02, 5.97, 5.81, 5.65, 5.5, 5.36, 5.21, 5.08],
[246.0, 31.7, 16.7, 12.3, 10.2, 9.1, 8.37, 7.87, 7.49, 7.21, 6.99, 6.81, 6.67, 6.54, 6.44, 6.35, 6.27, 6.2, 6.14, 6.09, 5.92, 5.76, 5.6, 5.45, 5.3, 5.16],
[253.0, 32.6, 17.1, 12.6, 10.5, 9.3, 8.55, 8.03, 7.65, 7.36, 7.13, 6.94, 6.79, 6.66, 6.55, 6.46, 6.38, 6.31, 6.25, 6.19, 6.02, 5.85, 5.69, 5.53, 5.38, 5.23],
[260.0, 33.4, 17.5, 12.8, 10.7, 9.49, 8.71, 8.18, 7.78, 7.48, 7.25, 7.06, 6.9, 6.77, 6.66, 6.56, 6.48, 6.41, 6.34, 6.29, 6.11, 5.93, 5.77, 5.6, 5.44, 5.29],
[266.0, 34.1, 17.9, 13.1, 10.9, 9.65, 8.86, 8.31, 7.91, 7.6, 7.36, 7.17, 7.01, 6.87, 6.76, 6.66, 6.57, 6.5, 6.43, 6.37, 6.19, 6.01, 5.84, 5.67, 5.51, 5.35],
[272.0, 34.8, 18.2, 13.3, 11.1, 9.81, 9.0, 8.44, 8.03, 7.71, 7.46, 7.26, 7.1, 6.96, 6.84, 6.74, 6.66, 6.58, 6.51, 6.45, 6.26, 6.08, 5.9, 5.73, 5.56, 5.4],
[277.0, 35.4, 18.5, 13.5, 11.2, 9.95, 9.12, 8.55, 8.13, 7.81, 7.56, 7.36, 7.19, 7.05, 6.93, 6.82, 6.73, 6.65, 6.58, 6.52, 6.33, 6.14, 5.96, 5.79, 5.61, 5.45],
[282.0, 36.0, 18.8, 13.7, 11.4, 10.1, 9.24, 8.66, 8.23, 7.91, 7.65, 7.44, 7.27, 7.12, 7.0, 6.9, 6.8, 6.72, 6.65, 6.59, 6.39, 6.2, 6.02, 5.84, 5.66, 5.49],
[286.0, 36.5, 19.1, 13.9, 11.6, 10.2, 9.35, 8.76, 8.32, 7.99, 7.73, 7.52, 7.34, 7.2, 7.07, 6.97, 6.87, 6.79, 6.72, 6.65, 6.45, 6.26, 6.07, 5.89, 5.71, 5.54],
[290.0, 37.0, 19.3, 14.1, 11.7, 10.3, 9.46, 8.85, 8.41, 8.07, 7.81, 7.59, 7.42, 7.27, 7.14, 7.03, 6.94, 6.85, 6.78, 6.71, 6.51, 6.31, 6.12, 5.93, 5.75, 5.57],
[294.0, 37.5, 19.5, 14.2, 11.8, 10.4, 9.55, 8.94, 8.49, 8.15, 7.88, 7.66, 7.48, 7.33, 7.2, 7.09, 7.0, 6.91, 6.84, 6.76, 6.56, 6.36, 6.17, 5.98, 5.79, 5.61],
[298.0, 37.9, 19.8, 14.4, 11.9, 10.5, 9.65, 9.03, 8.57, 8.22, 7.95, 7.73, 7.55, 7.39, 7.26, 7.15, 7.05, 6.96, 6.89, 6.82, 6.61, 6.41, 6.21, 6.02, 5.83, 5.65]]


def get_q(alpha, C, dfe):
    '''
    returns specified value(s) of studentized q distribution
    '''
    if C_in_table(C) and dfe_in_table(dfe):
        i = get_i(C)
        j = get_j(dfe)
        return read_table(alpha, i, j)
    elif not C_in_table(C) and dfe_in_table(dfe):
        i_1 = get_new_i(C)[0]
        i_2 = get_new_i(C)[1]
        j = get_j(dfe)
        return (read_table(alpha, i_1, j) + read_table(alpha, i_2, j)) / 2
    elif C_in_table(C) and not dfe_in_table(dfe):
        i = get_i(C)
        j_1 = get_new_j(dfe)[0]
        j_2 = get_new_j(dfe)[1]
        return (read_table(alpha, i, j_1) + read_table(alpha, i, j_2)) / 2
    else:
        i_1 = get_new_i(C)[0]
        i_2 = get_new_i(C)[1]
        j_1 = get_new_j(dfe)[0]
        j_2 = get_new_j(dfe)[1]
        return (read_table(alpha, i_1, j_1) + read_table(alpha, i_1, j_2) + read_table(alpha, i_2, j_1) + read_table(alpha, i_2, j_2)) / 4

    if alpha == .05:
        return a05[i][j]
    elif alpha == .01:
        return a01[i][j]
    else:
        print("Invalid Request")

def C_in_table(C):
    return (1 <= C <= 20) or (C == 24) or (C == 30) or (C == 40) or (C == 60) or (C == 120)

def dfe_in_table(dfe):
    return (2 <= dfe <= 20) or (dfe == 24) or (dfe == 30) or (dfe == 40) or (dfe == 60) or (dfe == 120)

def get_i(C):
    if (1 <= C <= 20):
        return C - 1
    elif (C == 24):
        return 20
    elif (C == 30):
        return 21
    elif (C == 40):
        return 22
    elif (C == 60):
        return 23
    elif (C == 120):
        return 24
    else:
        return 25

def get_j(dfe):
    if (2 <= dfe <= 20):
        return dfe - 1
    elif (dfe == 24):
        return 20
    elif (dfe == 30):
        return 21
    elif (dfe == 40):
        return 22
    elif (dfe == 60):
        return 23
    elif (dfe == 120):
        return 24
    else:
        return 25

def get_new_i(C):
    if 20 < C < 24 :
        return (19, 20)
    elif 24 < C < 30:
        return (20, 21)
    elif 30 < C < 40:
        return (21, 22)
    elif 40 < C < 60:
        return (22, 23)
    elif 60 < C < 120:
        return (23, 24)
    else:
        return 25

def get_new_j(dfe):
    if 20 < dfe < 24 :
        return (19, 20)
    elif 24 < dfe < 30:
        return (20, 21)
    elif 30 < dfe < 40:
        return (21, 22)
    elif 40 < dfe < 60:
        return (22, 23)
    elif 60 < dfe < 120:
        return (23, 24)
    else:
        return 25

def read_table(alpha, i, j):
    if alpha == .05:
        return a05[i][j]
    elif alpha == .01:
        return a01[i][j]
    else:
        print("Invalid Request")

